// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecases/account-usecases.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/usecases/account-usecases.go -destination=test/usecases-mocks/update-pass-usecase-mock.go -package=usecasesmocks
//

// Package usecasesmocks is a generated GoMock package.
package usecasesmocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-auth/internal/app/errors"
	request "github.com/henrique998/go-auth/internal/app/request"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdatePassUseCase is a mock of UpdatePassUseCase interface.
type MockUpdatePassUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdatePassUseCaseMockRecorder
}

// MockUpdatePassUseCaseMockRecorder is the mock recorder for MockUpdatePassUseCase.
type MockUpdatePassUseCaseMockRecorder struct {
	mock *MockUpdatePassUseCase
}

// NewMockUpdatePassUseCase creates a new mock instance.
func NewMockUpdatePassUseCase(ctrl *gomock.Controller) *MockUpdatePassUseCase {
	mock := &MockUpdatePassUseCase{ctrl: ctrl}
	mock.recorder = &MockUpdatePassUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdatePassUseCase) EXPECT() *MockUpdatePassUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdatePassUseCase) Execute(req request.NewPassRequest) errors.AppErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", req)
	ret0, _ := ret[0].(errors.AppErr)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdatePassUseCaseMockRecorder) Execute(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdatePassUseCase)(nil).Execute), req)
}
