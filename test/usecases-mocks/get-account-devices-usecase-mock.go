// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecases/account-usecases.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/usecases/account-usecases.go -destination=test/usecases-mocks/get-account-devices-usecase-mock.go -package=usecasesmocks
//

// Package usecasesmocks is a generated GoMock package.
package usecasesmocks

import (
	reflect "reflect"

	entities "github.com/henrique998/go-auth/internal/app/entities"
	errors "github.com/henrique998/go-auth/internal/app/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockGetAccountDevicesUsecase is a mock of GetAccountDevicesUsecase interface.
type MockGetAccountDevicesUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetAccountDevicesUsecaseMockRecorder
}

// MockGetAccountDevicesUsecaseMockRecorder is the mock recorder for MockGetAccountDevicesUsecase.
type MockGetAccountDevicesUsecaseMockRecorder struct {
	mock *MockGetAccountDevicesUsecase
}

// NewMockGetAccountDevicesUsecase creates a new mock instance.
func NewMockGetAccountDevicesUsecase(ctrl *gomock.Controller) *MockGetAccountDevicesUsecase {
	mock := &MockGetAccountDevicesUsecase{ctrl: ctrl}
	mock.recorder = &MockGetAccountDevicesUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAccountDevicesUsecase) EXPECT() *MockGetAccountDevicesUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetAccountDevicesUsecase) Execute(accountId string) ([]entities.Device, errors.AppErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", accountId)
	ret0, _ := ret[0].([]entities.Device)
	ret1, _ := ret[1].(errors.AppErr)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetAccountDevicesUsecaseMockRecorder) Execute(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetAccountDevicesUsecase)(nil).Execute), accountId)
}
