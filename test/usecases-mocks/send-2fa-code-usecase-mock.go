// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecases/account-usecases.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/usecases/account-usecases.go -destination=test/usecases-mocks/send-2fa-code-usecase-mock.go -package=usecasesmocks
//

// Package usecasesmocks is a generated GoMock package.
package usecasesmocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-auth/internal/app/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockSend2faCodeUseCase is a mock of Send2faCodeUseCase interface.
type MockSend2faCodeUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSend2faCodeUseCaseMockRecorder
}

// MockSend2faCodeUseCaseMockRecorder is the mock recorder for MockSend2faCodeUseCase.
type MockSend2faCodeUseCaseMockRecorder struct {
	mock *MockSend2faCodeUseCase
}

// NewMockSend2faCodeUseCase creates a new mock instance.
func NewMockSend2faCodeUseCase(ctrl *gomock.Controller) *MockSend2faCodeUseCase {
	mock := &MockSend2faCodeUseCase{ctrl: ctrl}
	mock.recorder = &MockSend2faCodeUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSend2faCodeUseCase) EXPECT() *MockSend2faCodeUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSend2faCodeUseCase) Execute(accountId string) errors.AppErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", accountId)
	ret0, _ := ret[0].(errors.AppErr)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSend2faCodeUseCaseMockRecorder) Execute(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSend2faCodeUseCase)(nil).Execute), accountId)
}
