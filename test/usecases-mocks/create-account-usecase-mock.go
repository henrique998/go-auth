// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecases/account-usecases.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/usecases/account-usecases.go -destination=test/usecases-mocks/create-account-usecase-mock.go -package=usecasesmocks
//

// Package usecasesmocks is a generated GoMock package.
package usecasesmocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-auth/internal/app/errors"
	request "github.com/henrique998/go-auth/internal/app/request"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateAccountUsecase is a mock of CreateAccountUsecase interface.
type MockCreateAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAccountUsecaseMockRecorder
}

// MockCreateAccountUsecaseMockRecorder is the mock recorder for MockCreateAccountUsecase.
type MockCreateAccountUsecaseMockRecorder struct {
	mock *MockCreateAccountUsecase
}

// NewMockCreateAccountUsecase creates a new mock instance.
func NewMockCreateAccountUsecase(ctrl *gomock.Controller) *MockCreateAccountUsecase {
	mock := &MockCreateAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockCreateAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateAccountUsecase) EXPECT() *MockCreateAccountUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateAccountUsecase) Execute(req request.CreateAccountRequest) errors.AppErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", req)
	ret0, _ := ret[0].(errors.AppErr)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateAccountUsecaseMockRecorder) Execute(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateAccountUsecase)(nil).Execute), req)
}
