// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecases/session-usecases.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/usecases/session-usecases.go -destination=test/usecases-mocks/login-with-credentails-usecase-mock.go -package=usecasesmocks
//

// Package usecasesmocks is a generated GoMock package.
package usecasesmocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-auth/internal/app/errors"
	request "github.com/henrique998/go-auth/internal/app/request"
	gomock "go.uber.org/mock/gomock"
)

// MockLoginWithCredentialsUseCase is a mock of LoginWithCredentialsUseCase interface.
type MockLoginWithCredentialsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginWithCredentialsUseCaseMockRecorder
}

// MockLoginWithCredentialsUseCaseMockRecorder is the mock recorder for MockLoginWithCredentialsUseCase.
type MockLoginWithCredentialsUseCaseMockRecorder struct {
	mock *MockLoginWithCredentialsUseCase
}

// NewMockLoginWithCredentialsUseCase creates a new mock instance.
func NewMockLoginWithCredentialsUseCase(ctrl *gomock.Controller) *MockLoginWithCredentialsUseCase {
	mock := &MockLoginWithCredentialsUseCase{ctrl: ctrl}
	mock.recorder = &MockLoginWithCredentialsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginWithCredentialsUseCase) EXPECT() *MockLoginWithCredentialsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockLoginWithCredentialsUseCase) Execute(req request.LoginWithCredentialsRequest) (string, string, errors.AppErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(errors.AppErr)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockLoginWithCredentialsUseCaseMockRecorder) Execute(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockLoginWithCredentialsUseCase)(nil).Execute), req)
}
