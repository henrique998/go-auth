// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecases/account-usecases.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/usecases/account-usecases.go -destination=test/usecases-mocks/send-new-pass-request-usecase-mock.go -package=usecasesmocks
//

// Package usecasesmocks is a generated GoMock package.
package usecasesmocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-auth/internal/app/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockSendNewPassRequestUseCase is a mock of SendNewPassRequestUseCase interface.
type MockSendNewPassRequestUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSendNewPassRequestUseCaseMockRecorder
}

// MockSendNewPassRequestUseCaseMockRecorder is the mock recorder for MockSendNewPassRequestUseCase.
type MockSendNewPassRequestUseCaseMockRecorder struct {
	mock *MockSendNewPassRequestUseCase
}

// NewMockSendNewPassRequestUseCase creates a new mock instance.
func NewMockSendNewPassRequestUseCase(ctrl *gomock.Controller) *MockSendNewPassRequestUseCase {
	mock := &MockSendNewPassRequestUseCase{ctrl: ctrl}
	mock.recorder = &MockSendNewPassRequestUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendNewPassRequestUseCase) EXPECT() *MockSendNewPassRequestUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSendNewPassRequestUseCase) Execute(email string) errors.AppErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", email)
	ret0, _ := ret[0].(errors.AppErr)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSendNewPassRequestUseCaseMockRecorder) Execute(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSendNewPassRequestUseCase)(nil).Execute), email)
}
