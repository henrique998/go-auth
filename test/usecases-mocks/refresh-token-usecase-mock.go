// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecases/session-usecases.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/usecases/session-usecases.go -destination=test/usecases-mocks/refresh-token-usecase-mock.go -package=usecasesmocks
//

// Package usecasesmocks is a generated GoMock package.
package usecasesmocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-auth/internal/app/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockRefreshTokenUseCase is a mock of RefreshTokenUseCase interface.
type MockRefreshTokenUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenUseCaseMockRecorder
}

// MockRefreshTokenUseCaseMockRecorder is the mock recorder for MockRefreshTokenUseCase.
type MockRefreshTokenUseCaseMockRecorder struct {
	mock *MockRefreshTokenUseCase
}

// NewMockRefreshTokenUseCase creates a new mock instance.
func NewMockRefreshTokenUseCase(ctrl *gomock.Controller) *MockRefreshTokenUseCase {
	mock := &MockRefreshTokenUseCase{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenUseCase) EXPECT() *MockRefreshTokenUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRefreshTokenUseCase) Execute(refreshToken string) (string, string, errors.AppErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(errors.AppErr)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockRefreshTokenUseCaseMockRecorder) Execute(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRefreshTokenUseCase)(nil).Execute), refreshToken)
}
